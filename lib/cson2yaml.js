// Generated by CoffeeScript 1.7.1
(function() {
  var cson2yaml, indentBy, indents, stringify, type, xcson;

  xcson = require('xcson');

  type = require('typeof');

  indentBy = '  ';

  indents = function(n) {
    return Array(n).join(indentBy);
  };

  stringify = function(data) {
    var handlers, indentLevel;
    indentLevel = 0;
    handlers = {
      array: function(arr) {
        var a, handler, output, _i, _len;
        if (arr.length === 0) {
          return '[]';
        }
        output = "";
        indentLevel++;
        for (_i = 0, _len = arr.length; _i < _len; _i++) {
          a = arr[_i];
          handler = handlers[type(a)];
          output += "\n" + indents(indentLevel) + "- " + handler(a);
        }
        indentLevel--;
        return output;
      },
      boolean: function(bool) {
        if (bool) {
          return "true";
        } else {
          return "false";
        }
      },
      "function": function(func) {
        throw new Error("Unexpected function " + func);
      },
      "null": function() {
        return "null";
      },
      number: function(n) {
        return n;
      },
      object: function(obj) {
        var handler, key, output, val;
        output = "";
        indentLevel++;
        for (key in obj) {
          val = obj[key];
          handler = handlers[type(val)];
          if (type(val) === "undefined" || !handler) {
            continue;
          }
          output += "\n" + indents(indentLevel) + ("" + key + ": " + (handler(val)));
        }
        indentLevel--;
        return output || '{}';
      },
      string: function(str) {
        var safestr;
        if (str.match(/^(true|false|undefined|null)$/)) {
          return "\"" + str + "\"";
        }
        safestr = JSON.stringify(str).replace(/^"|"$/g, "");
        if (safestr.match(/\\n/)) {
          return "|\n" + indents(indentLevel + 1) + safestr.replace(/(\\n|\\r)/g, "\n" + indents(indentLevel + 1));
        }
        return safestr;
      },
      undefined: function() {
        return "null";
      }
    };
    return "---" + handlers[type(data)](data) + "\n";
  };

  module.exports = cson2yaml = function(file) {
    return stringify(new xcson(file).toObject());
  };

}).call(this);
